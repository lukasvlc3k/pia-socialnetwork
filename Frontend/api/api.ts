/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BooleanResponse
 */
export interface BooleanResponse {
    /**
     * 
     * @type {boolean}
     * @memberof BooleanResponse
     */
    'response'?: boolean;
}
/**
 * 
 * @export
 * @interface FriendRequest
 */
export interface FriendRequest {
    /**
     * 
     * @type {number}
     * @memberof FriendRequest
     */
    'id'?: number;
    /**
     * 
     * @type {User}
     * @memberof FriendRequest
     */
    'userFrom'?: User;
    /**
     * 
     * @type {User}
     * @memberof FriendRequest
     */
    'userTo'?: User;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'email'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LoginResponse
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'expiration'?: string;
}
/**
 * 
 * @export
 * @interface MeResponse
 */
export interface MeResponse {
    /**
     * 
     * @type {boolean}
     * @memberof MeResponse
     */
    'ok'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MeResponse
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof MeResponse
     */
    'msg'?: string;
    /**
     * 
     * @type {User}
     * @memberof MeResponse
     */
    'usr'?: User;
}
/**
 * 
 * @export
 * @interface PostCreateRequest
 */
export interface PostCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof PostCreateRequest
     */
    'postType'?: PostCreateRequestPostTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PostCreateRequestPostTypeEnum {
    Post = 'POST',
    Announcement = 'ANNOUNCEMENT'
}

/**
 * 
 * @export
 * @interface PostDto
 */
export interface PostDto {
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'content'?: string;
    /**
     * 
     * @type {UserDto}
     * @memberof PostDto
     */
    'user'?: UserDto;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'publishedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'postType'?: PostDtoPostTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof PostDto
     */
    'postId'?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PostDtoPostTypeEnum {
    Post = 'POST',
    Announcement = 'ANNOUNCEMENT'
}

/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {number}
     * @memberof Role
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    'name'?: RoleNameEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RoleNameEnum {
    User = 'ROLE_USER',
    Admin = 'ROLE_ADMIN'
}

/**
 * 
 * @export
 * @interface SignupRequest
 */
export interface SignupRequest {
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof SignupRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface SignupResponse
 */
export interface SignupResponse {
    /**
     * 
     * @type {string}
     * @memberof SignupResponse
     */
    'state'?: SignupResponseStateEnum;
    /**
     * 
     * @type {string}
     * @memberof SignupResponse
     */
    'message'?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum SignupResponseStateEnum {
    Ok = 'OK',
    EmailInUse = 'EMAIL_IN_USE',
    WeakPassword = 'WEAK_PASSWORD',
    InvalidEmail = 'INVALID_EMAIL',
    InvalidName = 'INVALID_NAME'
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string;
    /**
     * 
     * @type {Set<Role>}
     * @memberof User
     */
    'roles'?: Set<Role>;
    /**
     * 
     * @type {Set<User>}
     * @memberof User
     */
    'friends'?: Set<User>;
    /**
     * 
     * @type {Set<FriendRequest>}
     * @memberof User
     */
    'receivedFriendRequests'?: Set<FriendRequest>;
    /**
     * 
     * @type {Set<FriendRequest>}
     * @memberof User
     */
    'sentFriendRequests'?: Set<FriendRequest>;
    /**
     * 
     * @type {Set<UserBlock>}
     * @memberof User
     */
    'blockedUsers'?: Set<UserBlock>;
}
/**
 * 
 * @export
 * @interface UserBlock
 */
export interface UserBlock {
    /**
     * 
     * @type {number}
     * @memberof UserBlock
     */
    'id'?: number;
    /**
     * 
     * @type {User}
     * @memberof UserBlock
     */
    'blockedBy'?: User;
    /**
     * 
     * @type {User}
     * @memberof UserBlock
     */
    'blockedUser'?: User;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof UserDto
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('loginUser', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (signupRequest: SignupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signupRequest' is not null or undefined
            assertParamExists('registerUser', 'signupRequest', signupRequest)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginUser(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(signupRequest: SignupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(signupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(loginRequest: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.loginUser(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignupRequest} signupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(signupRequest: SignupRequest, options?: any): AxiosPromise<SignupResponse> {
            return localVarFp.registerUser(signupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public loginUser(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).loginUser(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignupRequest} signupRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public registerUser(signupRequest: SignupRequest, options?: AxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).registerUser(signupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DataControllerApi - axios parameter creator
 * @export
 */
export const DataControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meResponse: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meResponseAdmin: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data/me/admin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataControllerApi - functional programming interface
 * @export
 */
export const DataControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meResponse(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meResponse(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meResponseAdmin(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meResponseAdmin(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataControllerApi - factory interface
 * @export
 */
export const DataControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meResponse(options?: any): AxiosPromise<MeResponse> {
            return localVarFp.meResponse(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meResponseAdmin(options?: any): AxiosPromise<MeResponse> {
            return localVarFp.meResponseAdmin(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataControllerApi - object-oriented interface
 * @export
 * @class DataControllerApi
 * @extends {BaseAPI}
 */
export class DataControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataControllerApi
     */
    public meResponse(options?: AxiosRequestConfig) {
        return DataControllerApiFp(this.configuration).meResponse(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataControllerApi
     */
    public meResponseAdmin(options?: AxiosRequestConfig) {
        return DataControllerApiFp(this.configuration).meResponseAdmin(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PostsControllerApi - axios parameter creator
 * @export
 */
export const PostsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PostCreateRequest} postCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (postCreateRequest: PostCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postCreateRequest' is not null or undefined
            assertParamExists('createPost', 'postCreateRequest', postCreateRequest)
            const localVarPath = `/posts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [count] 
         * @param {string} [newerThan] 
         * @param {string} [olderThan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts: async (count?: string, newerThan?: string, olderThan?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (newerThan !== undefined) {
                localVarQueryParameter['newerThan'] = newerThan;
            }

            if (olderThan !== undefined) {
                localVarQueryParameter['olderThan'] = olderThan;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostsControllerApi - functional programming interface
 * @export
 */
export const PostsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PostCreateRequest} postCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(postCreateRequest: PostCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(postCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [count] 
         * @param {string} [newerThan] 
         * @param {string} [olderThan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPosts(count?: string, newerThan?: string, olderThan?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(count, newerThan, olderThan, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostsControllerApi - factory interface
 * @export
 */
export const PostsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {PostCreateRequest} postCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(postCreateRequest: PostCreateRequest, options?: any): AxiosPromise<PostDto> {
            return localVarFp.createPost(postCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [count] 
         * @param {string} [newerThan] 
         * @param {string} [olderThan] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPosts(count?: string, newerThan?: string, olderThan?: string, options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.getPosts(count, newerThan, olderThan, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostsControllerApi - object-oriented interface
 * @export
 * @class PostsControllerApi
 * @extends {BaseAPI}
 */
export class PostsControllerApi extends BaseAPI {
    /**
     * 
     * @param {PostCreateRequest} postCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsControllerApi
     */
    public createPost(postCreateRequest: PostCreateRequest, options?: AxiosRequestConfig) {
        return PostsControllerApiFp(this.configuration).createPost(postCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [count] 
     * @param {string} [newerThan] 
     * @param {string} [olderThan] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostsControllerApi
     */
    public getPosts(count?: string, newerThan?: string, olderThan?: string, options?: AxiosRequestConfig) {
        return PostsControllerApiFp(this.configuration).getPosts(count, newerThan, olderThan, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicControllerApi - axios parameter creator
 * @export
 */
export const PublicControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailAvailable: async (email: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('emailAvailable', 'email', email)
            const localVarPath = `/public/email/{email}/available`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicControllerApi - functional programming interface
 * @export
 */
export const PublicControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailAvailable(email: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BooleanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailAvailable(email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicControllerApi - factory interface
 * @export
 */
export const PublicControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} email 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailAvailable(email: string, options?: any): AxiosPromise<BooleanResponse> {
            return localVarFp.emailAvailable(email, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicControllerApi - object-oriented interface
 * @export
 * @class PublicControllerApi
 * @extends {BaseAPI}
 */
export class PublicControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} email 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicControllerApi
     */
    public emailAvailable(email: string, options?: AxiosRequestConfig) {
        return PublicControllerApiFp(this.configuration).emailAvailable(email, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersControllerApi - axios parameter creator
 * @export
 */
export const UsersControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRelevantUsers: async (search: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('searchRelevantUsers', 'search', search)
            const localVarPath = `/users/results/{search}`
                .replace(`{${"search"}}`, encodeURIComponent(String(search)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersControllerApi - functional programming interface
 * @export
 */
export const UsersControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchRelevantUsers(search: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchRelevantUsers(search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersControllerApi - factory interface
 * @export
 */
export const UsersControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchRelevantUsers(search: string, options?: any): AxiosPromise<Array<UserDto>> {
            return localVarFp.searchRelevantUsers(search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersControllerApi - object-oriented interface
 * @export
 * @class UsersControllerApi
 * @extends {BaseAPI}
 */
export class UsersControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} search 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersControllerApi
     */
    public searchRelevantUsers(search: string, options?: AxiosRequestConfig) {
        return UsersControllerApiFp(this.configuration).searchRelevantUsers(search, options).then((request) => request(this.axios, this.basePath));
    }
}


